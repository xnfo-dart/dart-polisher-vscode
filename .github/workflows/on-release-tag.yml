name: Build on Tag

run-name: "${{ github.workflow }}: [on ${{ github.event_name != 'workflow_dispatch' && github.ref_type || 'workflow_dispatch' }}] [ref: ${{ github.ref_name }}]"

# Only on release tags.
on:
  push:
    # Release tags only
    tags:
#      - v[0-9]+.[0-9]+.[0-9]+-*
      - v[0-9]+.[0-9]+.[0-9]+

  # Allows you to run this workflow manually from the Actions tab (for testing)
  workflow_dispatch:

permissions:
  contents: read

jobs:

  setup:
    name: "Validate version"
    runs-on: ubuntu-latest

    outputs:
      status: ${{ steps.validated.conclusion }}
      buildRef: ${{ steps.validated.outputs.BUILD_REF_TAG }}
      packageVersion: ${{ steps.validated.outputs.PACKAGE_VERSION }}

    steps:

      - name: "Checkout local @master repository"
        uses: actions/checkout@v3
        # checkouts $GITHUB_REF_NAME

      # Version in package.json has to be the same as the ref TAG that fired this workflow.
      - name: Validate TAG and PACKAGE versions
        id: validated
        run: |
          echo "Github event: ${{ github.event_name }}"
          echo "Using ${GITHUB_REPOSITORY#*/} @$GITHUB_REF_NAME for build"

          PACKAGE_VERSION=$(node -p -e "require('./package.json').version")
          # GITHUB_REF_NAME will always be a semantic version tag in this workflow, if not, error.
          BUILD_REF_TAG=${{ github.ref_name }}

          echo "PACKAGE_VERSION=$PACKAGE_VERSION"
          echo "BUILD_REF_TAG=$BUILD_REF_TAG"

          # skip exit if this is a test tag or workflow_dispatch.
          if [[ "$BUILD_REF_TAG" != "v$PACKAGE_VERSION" ]]; then
              if [[ ("$BUILD_REF_TAG" == "v0.0.0") || ("$GITHUB_EVENT_NAME" == "workflow_dispatch") ]]; then
                  echo "::warning title="Version mismatch skiped"::Package: 'v$PACKAGE_VERSION' and tag: '$BUILD_REF_TAG' version mismatch"
              else
                  echo "::error title="Version mismatch"::Package: 'v$PACKAGE_VERSION' and tag: '$BUILD_REF_TAG' version mismatch!"
                  exit 1
              fi
          fi

          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "BUILD_REF_TAG=$BUILD_REF_TAG" >> $GITHUB_OUTPUT

        shell: bash

  # Build vscode extension with formatter_server native daemons
  build_extension:
    needs: [setup]
    if: needs.setup.outputs.status == 'success'

    name: "Build Dart Polisher extension for release"
    runs-on: ubuntu-latest

    steps:

      - name: "Setup build variables"
        run: |
          BUILD_REF_TAG=${{ needs.setup.outputs.buildRef }}
          PACKAGE_VERSION=${{ needs.setup.outputs.packageVersion }}

          echo "BUILD_REF_TAG=$BUILD_REF_TAG" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

          echo "BUILD_REF_TAG=$BUILD_REF_TAG"
          echo "PACKAGE_VERSION=$PACKAGE_VERSION"

      # checkout first or it deletes dir contents
      # https://github.com/actions/checkout/issues/430
      # Important, clean: false only works on existing git dir
      - name: "Checkout local repository"
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BUILD_REF_TAG }}

      # Alternative: https://github.com/dsaltares/fetch-gh-release-asset
      - name: "Download formatter_server release"
        uses: robinraju/release-downloader@v1.5
        with:
          repository: "xnfo-dart/formatter_server"
          latest: true
          #tag: "v1.0.0" #TODO: use tags after >1.0.0
          #fileName: "dartpolishd-*.zip"
          out-file-path: "bin"

      - name: Rename releases files to extension format
        run: |
          ls -R
          BIN_NAME="dartpolishd"
          OS_ARRAY="linux windows mac"
          for OS in $OS_ARRAY
          do
              unzip -o "${BIN_NAME}-$OS"
              rm "${BIN_NAME}-${OS}.zip"
              if [[ "$OS" == "windows" ]]; then
                  mv ${BIN_NAME}.exe "${BIN_NAME}-$OS.exe"
              else
                  mv $BIN_NAME "${BIN_NAME}-$OS"
              fi
          done
          ls -R
        working-directory: bin

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: install vscode package tool
        run: npm install -g vsce

      - name: npm install
        run: npm install

      - name: npm lint
        run: npm run lint

      # TODO: tests

      # TODO: vsix architectures packages. --target to reduce download size. (use matrix strategy)

      - name: vsce package
        run: vsce package

      - name: Store vsix
        uses: actions/upload-artifact@v3
        with:
          name: dart-polisher-v${{ env.PACKAGE_VERSION }}-vsix
          path: "*.vsix"
          retention-days: 5

      - name: Generate release data using Markdown
        run: |
          echo '### Build' >> $GITHUB_STEP_SUMMARY
          echo 'Built from git ref: `${{ env.BUILD_REF_TAG }}`' >> $GITHUB_STEP_SUMMARY
          printf 'Build package version:\n```\n${{ env.PACKAGE_VERSION }}\n```\n' >> $GITHUB_STEP_SUMMARY

          echo '' >> $GITHUB_STEP_SUMMARY

          echo '### Workflow' >> $GITHUB_STEP_SUMMARY
          echo 'Event name: `${{ github.event_name }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Workflow file: `on-release-tag.yml`' >> $GITHUB_STEP_SUMMARY
          echo 'From repository: `xnfo-dart/dart-polisher-vscode`' >> $GITHUB_STEP_SUMMARY
          echo 'Workflow files ref: `${{ github.ref_type }} : ${{ github.ref }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Called from workflow: `${{ github.workflow }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Called from workflow file: `${{ github.event.workflow }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Called from repository: `${{ github.repository }}`' >> $GITHUB_STEP_SUMMARY

          echo '' >> $GITHUB_STEP_SUMMARY

          echo '### Inputs' >> $GITHUB_STEP_SUMMARY
          printf 'Inputs:\n```json\n${{ toJSON(inputs) }}\n```\n' >> $GITHUB_STEP_SUMMARY
          printf 'Inputs: (Caller)\n```json\n${{ toJSON(github.event.inputs) }}\n```\n' >> $GITHUB_STEP_SUMMARY
        shell: bash

      - name: Setup build data
        run: |
          mkdir -p ./build-data
          echo '${{ env.BUILD_REF_TAG }}' >> ./build-data/ref
          echo '${{ env.PACKAGE_VERSION }}' >> ./build-data/package_version

      - name: Upload build data
        uses: actions/upload-artifact@v3.1.0
        with:
          name: extension-build-data
          path:  build-data/
          retention-days: 5

      # delete temporary artifacts
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            native-executables
