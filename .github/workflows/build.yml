name: Build

# NOTE: Keep this file compatible for building the last tagged release.

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_call
# NOTE: Payload is the same as the caller.
# run-name is not used when on a workflow_call
run-name: "${{ github.workflow }} ${{ github.event.repository.name }}: ('${{ github.job || github.event_name }}' -> '${{ github.workflow }}') [ref: ${{ github.ref_name }}]"

on:
  # Context is inherited from caller (except github.job).
  # External caller (from another repo) github.ref would not be valid.
  # Note: inputs from this workflow gets added to caller event inputs
  workflow_call:

  # Allows you to run this workflow manually from the Actions tab (for manual builds)
  workflow_dispatch:

permissions:
  contents: read

jobs:

  # Build vscode extension with formatter_server native daemons
  build_extension:

    name: "Build Dart Polisher VScode extension"
    runs-on: ubuntu-latest

    steps:

      # checkout first or it deletes dir contents
      # https://github.com/actions/checkout/issues/430
      # Important, clean: false only works on existing git dir
      - name: "Checkout local repository"
        uses: actions/checkout@v3

      - name: "Setup build variables"
        run: |
          BUILD_REF=${{ github.ref_name }}
          PACKAGE_VERSION=$(node -p -e "require('./package.json').version")

          echo "BUILD_REF=$BUILD_REF" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV

          echo "BUILD_REF=$BUILD_REF"
          echo "PACKAGE_VERSION=$PACKAGE_VERSION"

      # Alternative: https://github.com/dsaltares/fetch-gh-release-asset
      - name: "Download formatter_server release"
        uses: robinraju/release-downloader@v1.5
        with:
          repository: "xnfo-dart/formatter_server"
          latest: true
          #tag: "v1.0.0" #TODO: use tags after >1.0.0
          #fileName: "dartpolishd-*.zip"
          out-file-path: "bin"

      - name: Rename releases files to extension format
        run: |
          ls -R
          BIN_NAME="dartpolishd"
          OS_ARRAY="linux windows mac"
          for OS in $OS_ARRAY
          do
              unzip -o "${BIN_NAME}-$OS"
              rm "${BIN_NAME}-${OS}.zip"
              if [[ "$OS" == "windows" ]]; then
                  mv ${BIN_NAME}.exe "${BIN_NAME}-$OS.exe"
              else
                  mv $BIN_NAME "${BIN_NAME}-$OS"
              fi
          done
          ls -R
        working-directory: bin

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install vscode package tool
        run: npm install -g vsce

      - name: npm install
        run: npm install

      - name: npm lint
        run: npm run lint

      # TODO: tests

      # TODO: vsix architectures packages. --target to reduce download size. (use matrix strategy)

      - name: vsce package
        run: vsce package

      - name: Store vsix
        uses: actions/upload-artifact@v3
        with:
          name: dart-polisher-v${{ env.PACKAGE_VERSION }}-vsix
          path: "*.vsix"
          retention-days: 5

      - name: Generate release data using Markdown
        run: |
          echo '### Build' >> $GITHUB_STEP_SUMMARY
          echo 'Built from git ref: `${{ env.BUILD_REF }}`' >> $GITHUB_STEP_SUMMARY
          printf 'Build package version:\n```\n${{ env.PACKAGE_VERSION }}\n```\n' >> $GITHUB_STEP_SUMMARY

          echo '' >> $GITHUB_STEP_SUMMARY

          echo '### Workflow' >> $GITHUB_STEP_SUMMARY
          echo 'Event: `${{ github.event_name }}`' >> $GITHUB_STEP_SUMMARY
          echo 'REF: `${{ github.ref_type }} : ${{ github.ref }}`' >> $GITHUB_STEP_SUMMARY
          echo 'SHA: ${{ env.GITHUB_SHA }}' >> $GITHUB_STEP_SUMMARY
          echo 'File: `on-release-tag.yml`' >> $GITHUB_STEP_SUMMARY
          echo 'Repository: `xnfo-dart/dart-polisher-vscode`' >> $GITHUB_STEP_SUMMARY

          echo '' >> $GITHUB_STEP_SUMMARY

          echo '#### Workflow (Called from)' >> $GITHUB_STEP_SUMMARY
          echo 'Workflow name: `${{ github.workflow }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Workflow file: `${{ github.event.workflow }}`' >> $GITHUB_STEP_SUMMARY
          echo 'Repository: `${{ github.repository }}`' >> $GITHUB_STEP_SUMMARY

          echo '' >> $GITHUB_STEP_SUMMARY

          echo '#### Inputs' >> $GITHUB_STEP_SUMMARY
          printf 'Inputs:\n```json\n${{ toJSON(inputs) }}\n```\n' >> $GITHUB_STEP_SUMMARY
          printf 'Inputs: (Caller)\n```json\n${{ toJSON(github.event.inputs) }}\n```\n' >> $GITHUB_STEP_SUMMARY
        shell: bash

      - name: Setup build data
        run: |
          mkdir -p ./build-data
          echo '${{ env.BUILD_REF }}' >> ./build-data/ref
          echo '${{ env.PACKAGE_VERSION }}' >> ./build-data/package_version

      - name: Upload build data
        uses: actions/upload-artifact@v3.1.0
        with:
          name: extension-build-data
          path:  build-data/
          retention-days: 5

      # delete temporary artifacts
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            native-executables
